#!/usr/bin/env node

var fs = require('fs'),
    path = require('path'),
    spawn = require('child_process').spawn,
    exec = require('child_process').exec,
    express = require('express'),
    httpProxy = require('http-proxy'),
    argparser = require('argparser'),
    mkdirp = require('mkdirp'),
    sprintf = require('sprintf').sprintf,
    server = express.createServer(),
    proxyOptions,
    proxy;

argparser = new argparser();
argparser.addValueOptions(['port']);
argparser.parse(argparser.getOptions().port);

server.config = JSON.parse(fs.readFileSync('/usr/local/etc/buildit/config.json'));
server.watching = {};

proxyOptions = {
  router: {
    
  }
};

server.listen(0);

console.log(proxyOptions);

proxy = httpProxy.createServer(proxyOptions);
proxy.listen(argparser.getOptions().port);

console.log(proxy.address().port);

function chain(funcs) {
  if (typeof funcs === 'function') {
    funcs = Array.prototype.slice.call(arguments);
  }

  var i = -1;
  function next() {
    i++;
    var args = Array.prototype.slice.call(arguments).concat([next]);
    if (funcs[i]) {
      funcs[i].apply(null, args);
    }
  }
  return next;
}

var update_branch = function(config, req, res, next) {
  exec(sprintf('cd %s/repo; git pull origin; git branch -r', config.destination), function(err, stdout, stderr) {
    // parse output for branches
    var branchre = /origin\/([^\s*]+)/g,
        branchre2 = /origin\/([^\s*]+)/,
        branches = stdout.match(branchre).map(function(v){return branchre2.exec(v)[1]}),
        ignoreBranches = ['fetch', 'HEAD'];

    // exclude fetch
    ignoreBranches.forEach(function(name) {
      var index = branches.indexOf(name);
      if (index !== -1) {
        branches.splice(index, 1);
      }
    });

    branches.forEach(function(branch) {
      var branchpath = path.join(config.destination, 'branches', branch);

      path.exists(branchpath, function(exists) {
        function update() {
          chain(
            // git pull
            function(next) {
              exec(sprintf(
                  'cd %s; git pull origin',
                  branchpath), 
                next);
            },

            // see if branch has a deploy configuration
            function(e, stdout, stderr, next) {
              console.log('updated', config.name, branch);
              path.exists(path.join(branchpath, 'deploy.json'), next);
            },

            // build and launch server
            function(exists, next) {
              if (exists) {
                var deployconfig = JSON.parse(fs.readFileSync(path.join(config.destination, 'branches', branch, 'deploy.json')));

                if (deployconfig.commands.build) {
                  chain(function(next) {
                    console.log('building', config.name, branch);
                    // build
                    exec(
                      sprintf(
                        'cd %s; %s',
                        branchpath,
                        deployconfig.commands.build),
                      next);
                  }, function() {
                    console.log(arguments);
                    Array.prototype.slice.call(arguments,-1)[0].apply(null, Array.prototype.slice.call(arguments,0,-1));
                  },
                  chain(
                    function(error, stdout, stderr, next, next) {
                      if (error) {
                        console.log('failed', config.name, branch, stdout, stderr);
                      }
                      else {
                        console.log('built', config.name, branch);
                      }

                      // get forever id
                      exec('forever list', function(error, stdout, stderr) {
                        fs.readFile(path.join(branchpath, 'pid'), function(error, text) {
                          var pid, e;
                          if (error) {
                            pid = null;
                          } else {
                            pid = parseInt(text, 10);
                          }

                          console.log(pid, stdout);
                          try {
                            pid = stdout.match(new RegExp(/\[(\d+)\].*/.source+pid+'.*'))[1];
                          } catch(e) {
                            console.log('call next', next);
                          }

                          next(pid);
                        });
                      });
                    },

                    // launch server
                    function(foreverid, next) {
                      var portfile = path.join(branchpath, 'port');
                      console.log('launching', config.name, branch);

                      function watch() {
                        next();
                      }

                      if (server.watching[portfile]) {
                        fs.unwatchFile(portfile, server.watching[portfile]);
                      }
                      fs.watchFile(portfile, watch);
                      server.watching[portfile] = watch;

                      exec(
                        sprintf(
                          'cd %s; forever stop %s; PIDFILE=%s; PORTFILE=%s; forever start --minUpTime 500 %s',
                          branchpath,
                          foreverid,
                          path.join(branchpath, 'pid'),
                          path.join(branchpath, 'port'),
                          deployconfig.commands.daemon),
                        function(){});
                    },

                    // update proxy url
                    function() {
                      var port = fs.readFileSync(path.join(branchpath, 'port')), serverAddress;

                      if (port) {
                        // serverAddress = proxyOptions.router['.*'];
                        // delete proxyOptions.router['.*'];

                        proxyOptions.router['.*'+config.base_url+'/'+branch] = '127.0.0.1:' + port;
                        console.log(proxyOptions.router);
                        proxy.proxy.proxyTable.setRoutes(proxyOptions.router);

                        // proxy.close();
                        // proxy = httpProxy.createServer(proxyOptions);
                        // proxy.listen(argparser.getOptions().port);
                      }
                    }
                  ))();
                }
              }
            }
          )();
        }

        if (exists) {
          update();
        } else {
          chain(function(next) {
            exec(sprintf(
                'cd %s/branches; git clone -b %s %s %s',
                config.destination,
                branch,
                config.repository.git.url,
                branch),
              next);
          }, function(error, out, err, next) {
            if (!error) {
              update();
            }
          })();
        }
      });
    });
  });

  if (res)
    res.send('doing stuff');
};

server.config.apps.forEach(function(name) {
  var appconfig = JSON.parse(fs.readFileSync('/usr/local/etc/buildit/apps/'+name+'.json')),
      updateserver = express.createServer();

  mkdirp(path.join(appconfig.destination), function(e) {
    if (!e) {
      path.exists(path.join(appconfig.destination, 'repo'), function(exists) {
        if (!exists) {
          exec(sprintf('cd %s; git clone %s repo', appconfig.destination, appconfig.repository.git.url), function(error, stdout, stderr) {
            update_branch.call(server, appconfig);
          });
        } else {
          update_branch.call(server, appconfig);
        }
      });
    }
  });
  mkdirp(path.join(appconfig.destination, 'branches'));

  updateserver.get('*', update_branch.bind(server, appconfig));
  updateserver.listen(0);
  proxyOptions.router['.*/' + appconfig.name + '/git'] = '127.0.0.1:' + updateserver.address().port;
  proxy.proxy.proxyTable.setRoutes(proxyOptions.router);
  
  // proxy.close();
  // proxy = httpProxy.createServer(proxyOptions);
  // proxy.listen(argparser.getOptions().port);
});

server.on('routes', function(routes) {
  console.log('routes', routes);
});

server.get('*', function(req, res, next) {
  console.log(req.url);
  next();
});
